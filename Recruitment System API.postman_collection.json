{
	"info": {
		"_postman_id": "8f8bc168-2897-408e-ac62-6c301d4d868b",
		"name": "Recruitment System API",
		"description": "Recruitment System API - ƒê√£ chu·∫©n ho√° validation v√† error handling\n\nüéØ T√çNH NƒÇNG M·ªöI:\n- ‚úÖ Validation m·∫°nh: Gi·ªõi h·∫°n ƒë·ªô d√†i, format, whitelist sortBy/sortDir\n- ‚úÖ Pagination chu·∫©n: T·ª± ƒë·ªông gi·ªõi h·∫°n size ‚â§ 50\n- ‚úÖ Error response chu·∫©n: ApiResponse v·ªõi code/reason/context\n- ‚úÖ RBAC ƒë√∫ng: Employer ch·ªâ th·∫•y d·ªØ li·ªáu c√¥ng ty, Applicant ch·ªâ th·∫•y c·ªßa m√¨nh\n- ‚úÖ Upload an to√†n: Gi·ªõi h·∫°n 5MB, ch·ªâ PDF, magic number validation\n\nüöÄ H∆Ø·ªöNG D·∫™N TEST:\n1) Setup: baseUrl = http://localhost:8081\n2) Test Validation: D√πng 'Create Job - Validation Error Test'\n3) Test Pagination: D√πng 'Search - Pagination Validation Test'\n4) Test RBAC: D√πng 'List Company Jobs' vs 'List My Applications'\n5) Test Upload: D√πng 'Upload My Resume (PDF)'\n\nüìã ENDPOINTS M·ªöI:\n- GET /api/employer/jobs - Danh s√°ch jobs c·ªßa c√¥ng ty\n- GET /api/jobs/manage - Qu·∫£n l√Ω jobs v·ªõi pagination\n- GET /api/applications/my - Danh s√°ch applications c·ªßa user\n\nüîí B·∫¢O M·∫¨T:\n- Kh√¥ng l·ªô stack trace trong response\n- Input sanitization t·ª± ƒë·ªông\n- File upload validation ch·∫∑t ch·∫Ω",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "48481540",
		"_collection_link": "https://chinguyen3107-7344893.postman.co/workspace/Ch%25C3%25AD-Nguy%25E1%25BB%2585n's-Workspace~556e17ea-1f12-443b-8df6-d9e40470be85/collection/48481540-8f8bc168-2897-408e-ac62-6c301d4d868b?action=share&source=collection_link&creator=48481540"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"Password@123\",\n  \"firstName\": \"First\",\n  \"lastName\": \"Last\",\n  \"phoneNumber\": \"0900000000\",\n  \"role\": \"APPLICANT\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						}
					},
					"response": []
                },
                {
					"name": "Set Status: REVIEWED",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"REVIEWED\",\n  \"notes\": \"ƒê√£ xem h·ªì s∆°\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/applications/manage/1/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"applications",
								"manage",
								"1",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Status: INTERVIEW",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"INTERVIEW\",\n  \"notes\": \"M·ªùi ph·ªèng v·∫•n tu·∫ßn t·ªõi\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/applications/manage/1/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"applications",
								"manage",
								"1",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Status: OFFER",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"OFFER\",\n  \"notes\": \"Offer 20tr gross\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/applications/manage/1/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"applications",
								"manage",
								"1",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Status: HIRED",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"HIRED\",\n  \"notes\": \"·ª®ng vi√™n nh·∫≠n offer\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/applications/manage/1/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"applications",
								"manage",
								"1",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Status: REJECTED",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"REJECTED\",\n  \"notes\": \"Kh√¥ng ph√π h·ª£p y√™u c·∫ßu\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/applications/manage/1/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"applications",
								"manage",
								"1",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"Password@123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/auth/refresh?refresh_token={{refreshToken}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"refresh"
							],
							"query": [
								{
									"key": "refresh_token",
									"value": "{{refreshToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Me (Current User)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Email",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"{{verificationToken}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/verify-email",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"verify-email"
							]
						}
					},
					"response": []
				},
				{
					"name": "Resend Verification Email",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@example.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/resend-verification",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"resend-verification"
							]
						}
					},
					"response": []
				},
				{
					"name": "Forgot Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@example.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/forgot-password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"forgot-password"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"const json = pm.response.json();",
									"pm.test(\"ApiResponse shape\", function () {",
									"  pm.expect(json).to.have.property('success', true);",
									"  pm.expect(json).to.have.property('message');",
									"});",
									"pm.test(\"Message masks email existence\", function () {",
									"  pm.expect(String(json.message)).to.include(\"N·∫øu email c·ªßa b·∫°n t·ªìn t·∫°i\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"description": "Qu√™n m·∫≠t kh·∫©u: G·ª≠i email c·ªßa b·∫°n. Lu√¥n tr·∫£ 200 ƒë·ªÉ tr√°nh l·ªô th√¥ng tin. Ki·ªÉm tra h·ªôp th∆∞/sandbox mail ƒë·ªÉ nh·∫≠n link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ho·∫∑c l·∫•y token t·ª´ DB v√† g√°n v√†o bi·∫øn {{passwordResetToken}}.",
					"response": []
				},
				{
					"name": "Reset Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"{{passwordResetToken}}\",\n  \"newPassword\": \"NewPassword@123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/reset-password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"reset-password"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"const json = pm.response.json();",
									"pm.test(\"ApiResponse shape\", function () {",
									"  pm.expect(json).to.have.property('success', true);",
									"  pm.expect(json).to.have.property('message');",
									"});",
									"pm.test(\"Message indicates success\", function () {",
									"  pm.expect(String(json.message)).to.include(\"M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i th√†nh c√¥ng\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"description": "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u: D√°n token v√†o {{passwordResetToken}} (l·∫•y t·ª´ email/sandbox/DB). M·∫≠t kh·∫©u m·ªõi ph·∫£i ƒë·∫°t chu·∫©n: ‚â•8 k√Ω t·ª±, c√≥ ch·ªØ hoa/th∆∞·ªùng/s·ªë/k√Ω t·ª± ƒë·∫∑c bi·ªát.",
					"response": []
				},
				{
					"name": "Upload My Resume (PDF)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": ""
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/profiles/my/resume",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"profiles",
								"my",
								"resume"
							]
						}
					},
					"response": []
				}
			],
			"description": "X√°c th·ª±c v√† qu·∫£n l√Ω t√†i kho·∫£n\n- role: Public (register, login, verify-email, resend-verification, forgot-password, reset-password); Authenticated (me, logout); APPLICANT b·∫Øt bu·ªôc khi upload resume.\n- flow:\n  1) Register ‚Üí h·ªá th·ªëng t·∫°o user tr·∫°ng th√°i PENDING_EMAIL v√† g·ª≠i email x√°c minh.\n  2) Verify email ‚Üí ƒë·ªïi sang VERIFIED, c√≥ th·ªÉ ƒëƒÉng nh·∫≠p ƒë·∫ßy ƒë·ªß.\n  3) Login ‚Üí nh·∫≠n accessToken + refreshToken.\n  4) Me/Logout ‚Üí thao t√°c v·ªõi accessToken.\n  5) Refresh token ‚Üí c·∫•p accessToken m·ªõi t·ª´ refreshToken h·ª£p l·ªá.\n  6) Qu√™n m·∫≠t kh·∫©u ‚Üí g·ª≠i email reset; Reset password ‚Üí ƒë·∫∑t m·∫≠t kh·∫©u m·ªõi."
		},
		{
			"name": "Jobs Management",
			"item": [
				{
					"name": "Create Job (Manage)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Java Backend Developer\",\n  \"description\": \"Ph√°t tri·ªÉn API cho h·ªá th·ªëng tuy·ªÉn d·ª•ng\",\n  \"requirements\": \"3+ nƒÉm Java, Spring Boot, SQL\",\n  \"benefits\": \"B·∫£o hi·ªÉm, th∆∞·ªüng, hybrid\",\n  \"jobType\": \"FULL_TIME\",\n  \"status\": \"DRAFT\",\n  \"location\": \"Hanoi\",\n  \"salaryMin\": 15000000,\n  \"salaryMax\": 30000000,\n  \"salaryCurrency\": \"VND\",\n  \"experienceRequired\": \"3+ years\",\n  \"educationRequired\": \"Bachelor\",\n  \"skillsRequired\": \"Java, Spring, SQL\",\n  \"numberOfPositions\": 2,\n  \"applicationDeadline\": \"2099-12-31T23:59:59\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/jobs/manage",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"jobs",
								"manage"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Job - Validation Error Test",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"\",\n  \"description\": \"A very long description that exceeds the maximum allowed length of 20000 characters...\",\n  \"salaryCurrency\": \"INVALID\",\n  \"applicationDeadline\": \"2023-01-01T00:00:00\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/jobs/manage",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"jobs",
								"manage"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"  pm.response.to.have.status(400);",
									"});",
									"const json = pm.response.json();",
									"pm.test(\"Error response format\", function () {",
									"  pm.expect(json).to.have.property('success', false);",
									"  pm.expect(json).to.have.property('code', 'VALIDATION_ERROR');",
									"  pm.expect(json).to.have.property('reason');",
									"  pm.expect(json).to.have.property('context');",
									"});",
									"pm.test(\"Validation errors present\", function () {",
									"  pm.expect(json.error).to.be.an('object');",
									"  pm.expect(json.error).to.have.property('title');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"response": []
				},
				{
					"name": "Update Job (Manage)",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Java Backend Developer (Updated)\",\n  \"description\": \"C·∫≠p nh·∫≠t m√¥ t·∫£ c√¥ng vi·ªác\",\n  \"requirements\": \"3+ nƒÉm Java, Spring Boot, Docker\",\n  \"benefits\": \"B·∫£o hi·ªÉm, th∆∞·ªüng, hybrid\",\n  \"jobType\": \"FULL_TIME\",\n  \"status\": \"DRAFT\",\n  \"location\": \"Hanoi\",\n  \"salaryMin\": 18000000,\n  \"salaryMax\": 35000000,\n  \"salaryCurrency\": \"VND\",\n  \"experienceRequired\": \"3+ years\",\n  \"educationRequired\": \"Bachelor\",\n  \"skillsRequired\": \"Java, Spring, Docker\",\n  \"numberOfPositions\": 2,\n  \"applicationDeadline\": \"2099-12-31T23:59:59\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/jobs/manage/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"jobs",
								"manage",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Status (Manage)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"ACTIVE\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/jobs/manage/1/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"jobs",
								"manage",
								"1",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Job (Soft)",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/jobs/manage/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"jobs",
								"manage",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Job (Hard)",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/jobs/manage/1?hard=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"jobs",
								"manage",
								"1"
							],
							"query": [
								{
									"key": "hard",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Jobs (Manage)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/jobs/manage?page=0&size=10&sortBy=createdAt&sortDir=DESC&status=ACTIVE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"jobs",
								"manage"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								},
								{
									"key": "sortBy",
									"value": "createdAt"
								},
								{
									"key": "sortDir",
									"value": "DESC"
								},
								{
									"key": "status",
									"value": "ACTIVE",
									"description": "T√πy ch·ªçn: DRAFT, ACTIVE, CLOSED"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"const json = pm.response.json();",
									"pm.test(\"ApiResponse format\", function () {",
									"  pm.expect(json).to.have.property('success', true);",
									"  pm.expect(json).to.have.property('data');",
									"});",
									"pm.test(\"Pagination structure\", function () {",
									"  if (json.data && json.data.content) {",
									"    pm.expect(json.data).to.have.property('page');",
									"    pm.expect(json.data).to.have.property('size');",
									"    pm.expect(json.data.size).to.be.at.most(50);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"response": []
				}
			],
			"description": "Qu·∫£n l√Ω tin tuy·ªÉn d·ª•ng\n- role: RECRUITER c·ªßa c√¥ng ty s·ªü h·ªØu tin, ho·∫∑c ADMIN.\n- flow:\n  Draft ‚Üí ACTIVE ‚Üí Soft Delete (ƒë√°nh d·∫•u x√≥a) ho·∫∑c Hard Delete (x√≥a vƒ©nh vi·ªÖn).\n- endpoints: T·∫°o, C·∫≠p nh·∫≠t, C·∫≠p nh·∫≠t tr·∫°ng th√°i, X√≥a m·ªÅm/c·ª©ng.\n- L∆∞u √Ω: Job ch·ªâ hi·ªÉn th·ªã c√¥ng khai/·ª©ng tuy·ªÉn khi ACTIVE v√† tr∆∞·ªõc applicationDeadline."
		},
		{
			"name": "Email Verification",
			"item": [
				{
					"name": "Verify Email",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"{{verificationToken}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/verify-email",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"verify-email"
							]
						}
					},
					"response": []
				},
				{
					"name": "Resend Verification Email",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@example.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/resend-verification",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"resend-verification"
							]
						}
					},
					"response": []
				}
			],
			"description": "Lu·ªìng x√°c minh email\n- role: Public.\n- flow: Nh·∫≠n token t·ª´ email (ho·∫∑c truy v·∫•n ·ªü m·ª•c Debug) ‚Üí POST verify-email ƒë·ªÉ k√≠ch ho·∫°t t√†i kho·∫£n. C√≥ th·ªÉ y√™u c·∫ßu g·ª≠i l·∫°i email x√°c minh qua resend-verification.\n- B·∫£o m·∫≠t: Token d√πng 1 l·∫ßn v√† c√≥ th·ªùi h·∫°n theo c·∫•u h√¨nh."
		},
		{
			"name": "Public Jobs",
			"item": [
				{
					"name": "Search (Public)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/public/jobs/search?keyword=java&location=Hanoi&jobType=FULL_TIME&minSalary=&page=0&size=10&sortBy=createdAt&sortDir=DESC",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"public",
								"jobs",
								"search"
							],
							"query": [
								{
									"key": "keyword",
									"value": "java"
								},
								{
									"key": "location",
									"value": "Hanoi"
								},
								{
									"key": "jobType",
									"value": "FULL_TIME"
								},
								{
									"key": "minSalary",
									"value": ""
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								},
								{
									"key": "sortBy",
									"value": "createdAt"
								},
								{
									"key": "sortDir",
									"value": "DESC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search (Jobs) - Advanced Filters",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/jobs/search?keyword=java&location=Hanoi&jobType=FULL_TIME&salaryRange=10000000-20000000&postedWithin=30&experienceLevel=SENIOR&companySize=MEDIUM&workMode=REMOTE&benefits=bonus,insurance&page=0&size=10&sortBy=createdAt&sortDir=DESC",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"jobs",
								"search"
							],
							"query": [
								{
									"key": "keyword",
									"value": "java"
								},
								{
									"key": "location",
									"value": "Hanoi"
								},
								{
									"key": "jobType",
									"value": "FULL_TIME"
								},
								{
									"key": "salaryRange",
									"value": "10000000-20000000"
								},
								{
									"key": "postedWithin",
									"value": "30"
								},
								{
									"key": "experienceLevel",
									"value": "SENIOR"
								},
								{
									"key": "companySize",
									"value": "MEDIUM"
								},
								{
									"key": "workMode",
									"value": "REMOTE"
								},
								{
									"key": "benefits",
									"value": "bonus,insurance"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								},
								{
									"key": "sortBy",
									"value": "createdAt"
								},
								{
									"key": "sortDir",
									"value": "DESC"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"const json = pm.response.json();",
									"pm.test(\"ApiResponse success\", function () {",
									"  pm.expect(json).to.have.property('success', true);",
									"  pm.expect(json).to.have.property('data');",
									"});",
									"pm.test(\"Has pagination fields\", function () {",
									"  pm.expect(json.data).to.have.property('page');",
									"  pm.expect(json.data).to.have.property('size');",
									"  pm.expect(json.data).to.have.property('totalElements');",
									"  pm.expect(json.data).to.have.property('totalPages');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"response": []
				},
				{
					"name": "Validation - salaryRange invalid format",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/jobs/search?salaryRange=abc-xyz",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"jobs",
								"search"
							],
							"query": [
								{
									"key": "salaryRange",
									"value": "abc-xyz"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"400 for invalid salaryRange format\", function () {",
									"  pm.response.to.have.status(400);",
									"  pm.expect(pm.response.json().message).to.include(\"salaryRange kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"response": []
				},
				{
					"name": "Validation - postedWithin out of range",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/jobs/search?postedWithin=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"jobs",
								"search"
							],
							"query": [
								{
									"key": "postedWithin",
									"value": "0"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"400 for postedWithin out of range\", function () {",
									"  pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"response": []
				},
				{
					"name": "Validation - benefits too long",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/jobs/search?benefits={{tooLong}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"jobs",
								"search"
							],
							"query": [
								{
									"key": "benefits",
									"value": "{{tooLong}}"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"400 for benefits too long\", function () {",
									"  pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"response": []
				},
				{
					"name": "Search - Pagination Validation Test",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/public/jobs/search?page=0&size=100&sortBy=invalidField&sortDir=INVALID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"public",
								"jobs",
								"search"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "100",
									"description": "Test size > 50 should be limited to 50"
								},
								{
									"key": "sortBy",
									"value": "invalidField",
									"description": "Test invalid sortBy should fallback to default"
								},
								{
									"key": "sortDir",
									"value": "INVALID",
									"description": "Test invalid sortDir should fallback to DESC"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"const json = pm.response.json();",
									"pm.test(\"ApiResponse format\", function () {",
									"  pm.expect(json).to.have.property('success', true);",
									"  pm.expect(json).to.have.property('data');",
									"});",
									"pm.test(\"Size is limited to 50\", function () {",
									"  if (json.data && json.data.size) {",
									"    pm.expect(json.data.size).to.be.at.most(50);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"response": []
				},
				{
					"name": "Detail (Public)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/public/jobs/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"public",
								"jobs",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Latest (Public)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/public/jobs/latest?page=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"public",
								"jobs",
								"latest"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Jobs Test (Public)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/jobs/test",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"jobs",
								"test"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search (Jobs)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/jobs/search?keyword=java&page=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"jobs",
								"search"
							],
							"query": [
								{
									"key": "keyword",
									"value": "java"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Latest (Jobs)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/jobs/latest?page=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"jobs",
								"latest"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Detail (Jobs Public)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/jobs/public/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"jobs",
								"public",
								"1"
							]
						}
					},
					"response": []
				}
			],
			"description": "H∆∞·ªõng d·∫´n test Public Jobs (truy c·∫≠p c√¥ng khai)\n- role: Public (kh√¥ng c·∫ßn token).\n- Search: l·ªçc keyword/title/description/skills, location, jobType, minSalary; ph√¢n trang & s·∫Øp x·∫øp `sortBy`/`sortDir`.\n- Detail: ch·ªâ tr·∫£ v·ªÅ khi job ACTIVE v√† c√≤n h·∫°n (`applicationDeadline` > now).\n- Latest: danh s√°ch job ACTIVE m·ªõi nh·∫•t.\n- L∆∞u √Ω: C√≥ th·ªÉ s·∫Øp x·∫øp theo c√°c tr∆∞·ªùng nh∆∞ createdAt, publishedAt, salaryMin/Max, applicationsCount, viewsCount (n·∫øu backend h·ªó tr·ª£)."
		},
		{
			"name": "Profile Management",
			"item": [
				{
					"name": "Get My Profile",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/profiles/my",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"profiles",
								"my"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update My Profile",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"dateOfBirth\": \"1995-05-15\",\n  \"gender\": \"Nam\",\n  \"address\": \"123 ƒê∆∞·ªùng ABC\",\n  \"city\": \"H√† N·ªôi\",\n  \"country\": \"Vi·ªát Nam\",\n  \"summary\": \"L·∫≠p tr√¨nh vi√™n Java v·ªõi 3 nƒÉm kinh nghi·ªám ph√°t tri·ªÉn web application. C√≥ kinh nghi·ªám v·ªõi Spring Boot, MySQL, v√† c√°c c√¥ng ngh·ªá frontend.\",\n  \"experience\": \"‚Ä¢ C√¥ng ty ABC (2021-2024): L·∫≠p tr√¨nh vi√™n Java\\n  - Ph√°t tri·ªÉn RESTful API v·ªõi Spring Boot\\n  - Thi·∫øt k·∫ø v√† qu·∫£n l√Ω database MySQL\\n  - L√†m vi·ªác v·ªõi team 5 ng∆∞·ªùi\\n  - ƒê√≥ng g√≥p v√†o vi·ªác t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t h·ªá th·ªëng\\n\\n‚Ä¢ D·ª± √°n c√° nh√¢n (2020-2021)\\n  - X√¢y d·ª±ng ·ª©ng d·ª•ng qu·∫£n l√Ω b√°n h√†ng\\n  - S·ª≠ d·ª•ng Java, Spring MVC, JSP\",\n  \"education\": \"‚Ä¢ ƒê·∫°i h·ªçc B√°ch Khoa H√† N·ªôi (2017-2021)\\n  - Chuy√™n ng√†nh: C√¥ng ngh·ªá th√¥ng tin\\n  - GPA: 3.2/4.0\\n  - ƒê·ªì √°n t·ªët nghi·ªáp: H·ªá th·ªëng qu·∫£n l√Ω th∆∞ vi·ªán\",\n  \"skills\": \"‚Ä¢ L·∫≠p tr√¨nh: Java, Spring Boot, Spring Security, JPA/Hibernate\\n‚Ä¢ Database: MySQL, PostgreSQL\\n‚Ä¢ Frontend: HTML, CSS, JavaScript, React\\n‚Ä¢ Tools: Git, Maven, IntelliJ IDEA, Docker\\n‚Ä¢ Ng√¥n ng·ªØ: Ti·∫øng Anh (TOEIC 750)\",\n  \"certifications\": \"‚Ä¢ Oracle Certified Professional Java SE 8 Programmer (2022)\\n‚Ä¢ AWS Certified Developer Associate (2023)\\n‚Ä¢ Scrum Master Certification (2023)\",\n  \"languages\": \"‚Ä¢ Ti·∫øng Vi·ªát: B·∫£n ng·ªØ\\n‚Ä¢ Ti·∫øng Anh: Trung b√¨nh kh√° (TOEIC 750)\\n‚Ä¢ Ti·∫øng Nh·∫≠t: C∆° b·∫£n (N4)\",\n  \"linkedinUrl\": \"https://linkedin.com/in/nguyenvana\",\n  \"githubUrl\": \"https://github.com/nguyenvana\",\n  \"portfolioUrl\": \"https://nguyenvana.dev\",\n  \"desiredSalaryMin\": 15000000,\n  \"desiredSalaryMax\": 25000000,\n  \"desiredJobType\": \"FULL_TIME\",\n  \"desiredLocation\": \"H√† N·ªôi\",\n  \"availability\": \"C√≥ th·ªÉ b·∫Øt ƒë·∫ßu ngay\",\n  \"isPublic\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/profiles/my",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"profiles",
								"my"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile (Partial)",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"summary\": \"C·∫≠p nh·∫≠t t√≥m t·∫Øt m·ªõi v·ªÅ kinh nghi·ªám l·∫≠p tr√¨nh Java v√† Spring Boot\",\n  \"skills\": \"Java, Spring Boot, Spring Security, MySQL, React, Docker\",\n  \"desiredSalaryMin\": 18000000,\n  \"isPublic\": false\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/profiles/my",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"profiles",
								"my"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile (Simple Test)",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"dateOfBirth\": \"1990-01-01\",\n  \"gender\": \"Nam\",\n  \"city\": \"H√† N·ªôi\",\n  \"summary\": \"L·∫≠p tr√¨nh vi√™n Java v·ªõi kinh nghi·ªám ph√°t tri·ªÉn web application\",\n  \"skills\": \"Java, Spring Boot, MySQL\",\n  \"desiredSalaryMin\": 10000000,\n  \"desiredSalaryMax\": 20000000,\n  \"isPublic\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/profiles/my",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"profiles",
								"my"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile (Validation Test)",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"summary\": \"T√≥m t·∫Øt r·∫•t d√†i v∆∞·ª£t qu√° 2000 k√Ω t·ª±...\",\n  \"gender\": \"Gi·ªõi t√≠nh r·∫•t d√†i v∆∞·ª£t qu√° 20 k√Ω t·ª±\",\n  \"linkedinUrl\": \"URL r·∫•t d√†i v∆∞·ª£t qu√° 500 k√Ω t·ª±...\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/profiles/my",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"profiles",
								"my"
							]
						}
					},
					"response": []
				},
				{
					"name": "Security Test - No Token (GET)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/profiles/my",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"profiles",
								"my"
							]
						}
					},
					"response": []
				},
				{
					"name": "Security Test - No Token (PUT)",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"summary\": \"Test kh√¥ng c√≥ token\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/profiles/my",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"profiles",
								"my"
							]
						}
					},
					"response": []
				},
				{
					"name": "Security Test - Wrong Role (RECRUITER)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{recruiterToken}}",
								"description": "Token c·ªßa user v·ªõi role RECRUITER",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/profiles/my",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"profiles",
								"my"
							]
						}
					},
					"response": []
				},
				{
					"name": "Security Test - Wrong Role (ADMIN)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"description": "Token c·ªßa user v·ªõi role ADMIN",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/profiles/my",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"profiles",
								"my"
							]
						}
					},
					"response": []
				},
				{
					"name": "Security Test - Invalid Token",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer invalid_token_here",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/profiles/my",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"profiles",
								"my"
							]
						}
					},
					"response": []
				}
			],
			"description": "Qu·∫£n l√Ω h·ªì s∆° ·ª©ng vi√™n (APPLICANT)\n- role: Ch·ªâ APPLICANT ƒë√£ ƒëƒÉng nh·∫≠p.\n- GET /api/profiles/my: L·∫•y h·ªì s∆° ng∆∞·ªùi d√πng hi·ªán t·∫°i.\n- PUT /api/profiles/my: C·∫≠p nh·∫≠t h·ªì s∆°; c√≥ ki·ªÉm tra/gi·ªõi h·∫°n ƒë·ªô d√†i c√°c tr∆∞·ªùng; ch·ªâ c√°c tr∆∞·ªùng h·ª£p l·ªá m·ªõi ƒë∆∞·ª£c l∆∞u.\n- B·∫£o m·∫≠t: Y√™u c·∫ßu Bearer token h·ª£p l·ªá; t·ª´ ch·ªëi khi sai role/thi·∫øu token."
		},
		{
			"name": "Debug",
			"item": [
				{
					"name": "Get User by Email",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/debug/auth/user/user@example.com",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"debug",
								"auth",
								"user",
								"user@example.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test Password",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/debug/auth/test-password?email=user@example.com&password=Password@123",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"debug",
								"auth",
								"test-password"
							],
							"query": [
								{
									"key": "email",
									"value": "user@example.com"
								},
								{
									"key": "password",
									"value": "Password@123"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Test Refresh Token by Email",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/debug/auth/test-refresh-token/user@example.com",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"debug",
								"auth",
								"test-refresh-token",
								"user@example.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Test User",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/debug/auth/create-test-user?email=test2@example.com&password=Password@123&firstName=Test&lastName=User",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"debug",
								"auth",
								"create-test-user"
							],
							"query": [
								{
									"key": "email",
									"value": "test2@example.com"
								},
								{
									"key": "password",
									"value": "Password@123"
								},
								{
									"key": "firstName",
									"value": "Test"
								},
								{
									"key": "lastName",
									"value": "User"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Verification Token by Email",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/debug/auth/verification-token/user@example.com",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"debug",
								"auth",
								"verification-token",
								"user@example.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Email Verification Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/debug/auth/email-status/user@example.com",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"debug",
								"auth",
								"email-status",
								"user@example.com"
							]
						}
					},
					"response": []
				}
			],
			"description": "C√°c endpoint Debug ch·ªâ d√πng trong m√¥i tr∆∞·ªùng DEV\n- role: Public (kh√¥ng y√™u c·∫ßu token) ‚Äî TUY·ªÜT ƒê·ªêI kh√¥ng b·∫≠t ·ªü production.\n- Ch·ª©c nƒÉng: tra c·ª©u user theo email, ki·ªÉm tra m·∫≠t kh·∫©u, t·∫°o user test, l·∫•y refresh token/verification token, ki·ªÉm tra tr·∫°ng th√°i x√°c minh email.\n- C·∫£nh b√°o: C√≥ th·ªÉ l·ªô d·ªØ li·ªáu nh·∫°y c·∫£m; d√πng ƒë·ªÉ h·ªó tr·ª£ ki·ªÉm th·ª≠ lu·ªìng Auth/Email."
		},
		{
			"name": "Applications (My)",
			"item": [
				{
					"name": "Apply to Job (My)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jobPostingId\": 1,\n  \"coverLetter\": \"Th∆∞ xin vi·ªác m·∫´u...\",\n  \"resumeUrl\": \"https://example.com/cv.pdf\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/applications/my",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"applications",
								"my"
							]
						}
					},
					"response": []
				},
				{
					"name": "List My Applications",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/applications/my?page=0&size=10&sortBy=createdAt&sortDir=DESC&status=RECEIVED",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"applications",
								"my"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								},
								{
									"key": "sortBy",
									"value": "createdAt"
								},
								{
									"key": "sortDir",
									"value": "DESC"
								},
								{
									"key": "status",
									"value": "RECEIVED",
									"description": "T√πy ch·ªçn: RECEIVED, REVIEWED, INTERVIEW, OFFER, HIRED, REJECTED"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"const json = pm.response.json();",
									"pm.test(\"ApiResponse format\", function () {",
									"  pm.expect(json).to.have.property('success', true);",
									"  pm.expect(json).to.have.property('data');",
									"});",
									"pm.test(\"Pagination structure\", function () {",
									"  if (json.data && json.data.content) {",
									"    pm.expect(json.data).to.have.property('page');",
									"    pm.expect(json.data).to.have.property('size');",
									"    pm.expect(json.data.size).to.be.at.most(50);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"response": []
				},
				{
					"name": "Withdraw Application (My)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/applications/my/{{applicationId}}/withdraw",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"applications",
								"my",
								"{{applicationId}}",
								"withdraw"
							]
						}
					},
					"response": []
				}
			],
			"description": "N·ªôp ƒë∆°n ·ª©ng tuy·ªÉn b·ªüi ·ª©ng vi√™n\n- role: APPLICANT ƒë√£ ƒëƒÉng nh·∫≠p (n√™n c√≥ email VERIFIED).\n- POST /api/applications/my: G·ª≠i ƒë∆°n v·ªõi `jobPostingId`, `coverLetter`, `resumeUrl`.\n- POST /api/applications/my/{id}/withdraw: R√∫t ƒë∆°n khi tr·∫°ng th√°i l√† RECEIVED/REVIEWED ‚Üí chuy·ªÉn sang WITHDRAWN (kh√¥ng th·ªÉ chuy·ªÉn ti·∫øp).\n- ƒêi·ªÅu ki·ªán: Job ph·∫£i ACTIVE v√† c√≤n h·∫°n n·ªôp, kh√¥ng b·ªã x√≥a.\n- K·∫øt qu·∫£: L∆∞u h·ªì s∆° ·ª©ng tuy·ªÉn, c√≥ th·ªÉ th√¥ng b√°o t·ªõi nh√† tuy·ªÉn d·ª•ng, v√† tr·∫£ k√®m `timeline` trong ApplicationResponse n·∫øu c√≥ l·ªãch s·ª≠."
		},
		{
			"name": "Applications Management",
			"item": [
				{
					"name": "List Applications (Manage)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/applications/manage?page=0&size=10&status=RECEIVED&jobPostingId=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"applications",
								"manage"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								},
								{
									"key": "status",
									"value": "RECEIVED",
									"description": "T√πy ch·ªçn: RECEIVED, REVIEWED, INTERVIEW, OFFER, HIRED, REJECTED"
								},
								{
									"key": "jobPostingId",
									"value": "1",
									"description": "T√πy ch·ªçn: l·ªçc theo tin tuy·ªÉn d·ª•ng"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Application Detail (Manage)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/applications/manage/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"applications",
								"manage",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Application Status (Manage)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"INTERVIEW\",\n  \"notes\": \"M·ªùi ph·ªèng v·∫•n v√†o tu·∫ßn t·ªõi\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/applications/manage/1/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"applications",
								"manage",
								"1",
								"status"
							]
						}
					},
					"response": []
				}
			],
			"description": "Qu·∫£n l√Ω ƒë∆°n ·ª©ng tuy·ªÉn cho nh√† tuy·ªÉn d·ª•ng\n- role: RECRUITER (gi·ªõi h·∫°n trong c√¥ng ty c·ªßa m√¨nh) ho·∫∑c ADMIN (to√†n h·ªá th·ªëng).\n- Danh s√°ch: ph√¢n trang, l·ªçc theo `status` v√† `jobPostingId`.\n- Chi ti·∫øt: ch·ªâ xem ƒë∆∞·ª£c khi ƒë∆°n thu·ªôc c√¥ng ty c·ªßa user.\n- C·∫≠p nh·∫≠t tr·∫°ng th√°i: flow RECEIVED ‚Üí REVIEWED ‚Üí INTERVIEW ‚Üí OFFER ‚Üí (HIRED | REJECTED). ·ª®ng vi√™n c√≥ th·ªÉ r√∫t ƒë∆°n ‚Üí WITHDRAWN (kh√¥ng th·ªÉ chuy·ªÉn ti·∫øp).\n- M·ªói l·∫ßn ƒë·ªïi tr·∫°ng th√°i ho·∫∑c r√∫t ƒë∆°n, h·ªá th·ªëng ghi `timeline` (fromStatus ‚Üí toStatus, note, changedBy, changedAt) v√† tr·∫£ v·ªÅ trong `ApplicationResponse.timeline`. Khi chuy·ªÉn t·ª´ RECEIVED ghi `reviewedAt/by` v√† g·ª≠i email cho ·ª©ng vi√™n."
		},
		{
			"name": "Dashboards",
			"item": [
				{
					"name": "Admin Dashboard",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/admin/dashboard",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"admin",
								"dashboard"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"const json = pm.response.json();",
									"pm.test(\"Body has ApiResponse shape\", function () {",
									"  pm.expect(json).to.have.property('success', true);",
									"  pm.expect(json).to.have.property('data');",
									"});",
									"pm.test(\"Data contains totalUsers and status maps\", function () {",
									"  pm.expect(json.data).to.have.property('totalUsers');",
									"  pm.expect(json.data).to.have.property('jobsByStatus');",
									"  pm.expect(json.data).to.have.property('applicationsByStatus');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"response": []
				},
				{
					"name": "Employer Dashboard",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{recruiterToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/employer/dashboard",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"employer",
								"dashboard"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"const json = pm.response.json();",
									"pm.test(\"Body has ApiResponse shape\", function () {",
									"  pm.expect(json).to.have.property('success', true);",
									"  pm.expect(json).to.have.property('data');",
									"});",
									"pm.test(\"Data contains activeJobs and conversionRate\", function () {",
									"  pm.expect(json.data).to.have.property('activeJobs');",
									"  pm.expect(json.data).to.have.property('conversionRate');",
									"});",
									"if (Array.isArray(json.data.activeJobs) && json.data.activeJobs.length > 0) {",
									"  const item = json.data.activeJobs[0];",
									"  pm.test(\"activeJobs item shape\", function () {",
									"    pm.expect(item).to.have.property('jobId');",
									"    pm.expect(item).to.have.property('title');",
									"    pm.expect(item).to.have.property('status');",
									"    pm.expect(item).to.have.property('applications');",
									"  });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"response": []
				},
				{
					"name": "List Company Jobs",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{recruiterToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/employer/jobs?page=0&size=10&sortBy=createdAt&sortDir=DESC&status=ACTIVE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"employer",
								"jobs"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								},
								{
									"key": "sortBy",
									"value": "createdAt"
								},
								{
									"key": "sortDir",
									"value": "DESC"
								},
								{
									"key": "status",
									"value": "ACTIVE",
									"description": "T√πy ch·ªçn: DRAFT, ACTIVE, CLOSED"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"const json = pm.response.json();",
									"pm.test(\"ApiResponse format\", function () {",
									"  pm.expect(json).to.have.property('success', true);",
									"  pm.expect(json).to.have.property('data');",
									"});",
									"pm.test(\"Pagination structure\", function () {",
									"  if (json.data && json.data.content) {",
									"    pm.expect(json.data).to.have.property('page');",
									"    pm.expect(json.data).to.have.property('size');",
									"    pm.expect(json.data.size).to.be.at.most(50);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"response": []
				}
			],
			"description": "B·∫£ng ƒëi·ªÅu khi·ªÉn (Dashboards)\n\n1) Admin Dashboard\n- Endpoint: GET /api/admin/dashboard\n- Quy·ªÅn: Ch·ªâ ADMIN (Authorization: Bearer {{adminToken}}).\n- D·ªØ li·ªáu tr·∫£ v·ªÅ: t·ªïng s·ªë ng∆∞·ªùi d√πng (totalUsers), s·ªë l∆∞·ª£ng tin tuy·ªÉn d·ª•ng theo tr·∫°ng th√°i (jobsByStatus), s·ªë l∆∞·ª£ng ƒë∆°n ·ª©ng tuy·ªÉn theo tr·∫°ng th√°i (applicationsByStatus).\n- M·ª•c ƒë√≠ch: Th·ªëng k√™ nhanh to√†n h·ªá th·ªëng ƒë·ªÉ theo d√µi ho·∫°t ƒë·ªông.\n\n2) Employer Dashboard\n- Endpoint: GET /api/employer/dashboard\n- Quy·ªÅn: EMPLOYER/RECRUITER thu·ªôc c√¥ng ty ho·∫∑c ADMIN (Authorization: Bearer {{recruiterToken}} ho·∫∑c {{adminToken}}).\n- D·ªØ li·ªáu tr·∫£ v·ªÅ: danh s√°ch tin ƒëang ACTIVE c·ªßa c√¥ng ty k√®m s·ªë ƒë∆°n ·ª©ng tuy·ªÉn cho m·ªói tin (activeJobs), t·ª∑ l·ªá chuy·ªÉn ƒë·ªïi c∆° b·∫£n (conversionRate = HIRED / t·ªïng ƒë∆°n).\n- M·ª•c ƒë√≠ch: Gi√∫p nh√† tuy·ªÉn d·ª•ng theo d√µi hi·ªáu qu·∫£ tuy·ªÉn d·ª•ng theo t·ª´ng tin v√† t·ªïng quan."
		},
		{
			"name": "Interviews",
			"item": [
				{
					"name": "Schedule Interview",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"applicationId\": 2,\n  \"scheduledAt\": \"2099-12-31T10:00:00\",\n  \"durationMinutes\": 60,\n  \"interviewType\": \"VIDEO\",\n  \"location\": null,\n  \"meetingLink\": \"https://meet.example.com/abc\",\n  \"notes\": \"Bu·ªïi ph·ªèng v·∫•n k·ªπ thu·∫≠t\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/interviews/schedule",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"interviews",
								"schedule"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", function () { pm.response.to.have.status(200); });",
									"const json = pm.response.json();",
									"pm.test(\"ApiResponse success\", function () { pm.expect(json).to.have.property('success', true); });",
									"pm.test(\"Has interview fields\", function () { pm.expect(json.data).to.have.property('id'); pm.expect(json.data).to.have.property('applicationId'); pm.expect(json.data).to.have.property('scheduledAt'); });"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "My Interviews",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/interviews/my?start={{start}}&end={{end}}&status={{interviewStatus}}&page=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"interviews",
								"my"
							],
							"query": [
								{
									"key": "start",
									"value": "{{start}}",
									"description": "ISO datetime, vd: 2025-01-01T00:00:00"
								},
								{
									"key": "end",
									"value": "{{end}}",
									"description": "ISO datetime"
								},
								{
									"key": "status",
									"value": "{{interviewStatus}}",
									"description": "SCHEDULED|COMPLETED|CANCELLED|RESCHEDULED"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", function () { pm.response.to.have.status(200); });",
									"const json = pm.response.json();",
									"pm.test(\"ApiResponse success\", function () { pm.expect(json).to.have.property('success', true); });",
									"pm.test(\"Has page structure\", function () { pm.expect(json.data).to.have.property('content'); });"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Reschedule Interview",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"newScheduledAt\": \"2099-12-31T11:00:00\",\n  \"reason\": \"D·ªùi 1 ti·∫øng do b·∫≠n h·ªçp\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/interviews/{{interviewId}}/reschedule",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"interviews",
								"{{interviewId}}",
								"reschedule"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cancel Interview",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"reason\": \"·ª®ng vi√™n b√°o b·∫≠n\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/interviews/{{interviewId}}/cancel",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"interviews",
								"{{interviewId}}",
								"cancel"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", function () { pm.response.to.have.status(200); });",
									"const json = pm.response.json();",
									"pm.test(\"Cancelled\", function () { pm.expect(json.data.status).to.eql('CANCELLED'); });"
								],
								"type": "text/javascript"
							}
						}
					],
					"response": []
				},
				{
					"name": "Complete Interview",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"notes\": \"Ph·ªèng v·∫•n xong, ch·ªù ƒë√°nh gi√°\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/interviews/{{interviewId}}/complete",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"interviews",
								"{{interviewId}}",
								"complete"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", function () { pm.response.to.have.status(200); });",
									"const json = pm.response.json();",
									"pm.test(\"Completed\", function () { pm.expect(json.data.status).to.eql('COMPLETED'); });"
								],
								"type": "text/javascript"
							}
						}
					],
					"response": []
				}
				],
				"description": "Qu·∫£n l√Ω l·ªãch ph·ªèng v·∫•n\n- Schedule: POST /api/interviews/schedule (EMPLOYER/RECRUITER c√¥ng ty s·ªü h·ªØu application).\n- My: GET /api/interviews/my (Applicant: c√°c l·ªãch c·ªßa h·ªç; Employer/Recruiter: c√°c l·ªãch h·ªç t·∫°o).\n- Reschedule: PATCH /api/interviews/{id}/reschedule.\n- Email: H·ªá th·ªëng g·ª≠i .ics cho applicant v√† interviewer."
			}
		],
		"variable": [
			{
				"key": "baseUrl",
				"value": "http://localhost:8081"
			},
			{
				"key": "accessToken",
				"value": ""
			},
			{
				"key": "refreshToken",
				"value": ""
			},
			{
				"key": "verificationToken",
				"value": ""
			},
			{
				"key": "passwordResetToken",
				"value": ""
			},
			{
				"key": "recruiterToken",
				"value": ""
			},
			{
				"key": "adminToken",
				"value": ""
			},
			{
				"key": "interviewId",
				"value": ""
			},
			{
				"key": "start",
				"value": "2025-01-01T00:00:00"
			},
			{
				"key": "end",
				"value": "2099-12-31T23:59:59"
			},
			{
				"key": "interviewStatus",
				"value": ""
			}
		]
	}