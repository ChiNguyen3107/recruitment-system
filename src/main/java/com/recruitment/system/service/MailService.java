package com.recruitment.system.service;

import com.recruitment.system.entity.User;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;
import org.thymeleaf.TemplateEngine;
import org.thymeleaf.context.Context;

import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;

/**
 * Service x·ª≠ l√Ω g·ª≠i email
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class MailService {

    private final JavaMailSender mailSender;
    private final TemplateEngine templateEngine;

    @Value("${spring.mail.username}")
    private String fromEmail;

    @Value("${app.frontend.url:http://localhost:3000}")
    private String frontendUrl;

    @Value("${app.mail.verification.expiration:24}")
    private int verificationExpirationHours;

    /**
     * G·ª≠i email x√°c minh ƒë·ªãa ch·ªâ email
     */
    public void sendVerificationEmail(User user, String verificationToken) {
        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");

            helper.setFrom(fromEmail);
            helper.setTo(user.getEmail());
            helper.setSubject("X√°c minh ƒë·ªãa ch·ªâ email - H·ªá th·ªëng Tuy·ªÉn d·ª•ng");

            // T·∫°o n·ªôi dung email b·∫±ng HTML template
            String htmlContent = createVerificationEmailContent(user, verificationToken);
            helper.setText(htmlContent, true);

            mailSender.send(message);
            log.info("Verification email sent successfully to: {}", user.getEmail());

        } catch (MessagingException e) {
            log.error("Failed to send verification email to: {}", user.getEmail(), e);
            throw new RuntimeException("Kh√¥ng th·ªÉ g·ª≠i email x√°c minh", e);
        }
    }

    /**
     * T·∫°o n·ªôi dung HTML cho email x√°c minh
     */
    private String createVerificationEmailContent(User user, String verificationToken) {
        Map<String, Object> variables = new HashMap<>();
        variables.put("userName", user.getFullName());
        variables.put("verificationLink", frontendUrl + "/verify-email?token=" + verificationToken);
        variables.put("expirationHours", verificationExpirationHours);
        variables.put("currentYear", LocalDateTime.now().getYear());
        variables.put("appName", "H·ªá th·ªëng Tuy·ªÉn d·ª•ng");

        return createHtmlTemplate("verification-email", variables);
    }

    /**
     * T·∫°o template HTML t·ª´ Thymeleaf ho·∫∑c HTML thu·∫ßn
     */
    private String createHtmlTemplate(String templateName, Map<String, Object> variables) {
        try {
            Context context = new Context();
            context.setVariables(variables);
            return templateEngine.process(templateName, context);
        } catch (Exception e) {
            log.warn("Template engine not available, using fallback HTML template");
            return createFallbackHtmlTemplate(variables);
        }
    }

    /**
     * Template HTML fallback khi kh√¥ng c√≥ Thymeleaf
     */
    private String createFallbackHtmlTemplate(Map<String, Object> variables) {
        return """
            <!DOCTYPE html>
            <html lang="vi">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>X√°c minh email</title>
                <style>
                    body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
                    .container { max-width: 600px; margin: 0 auto; padding: 20px; }
                    .header { background: #007bff; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }
                    .content { background: #f8f9fa; padding: 30px; border-radius: 0 0 8px 8px; }
                    .button { display: inline-block; background: #007bff; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; margin: 20px 0; }
                    .footer { text-align: center; margin-top: 30px; color: #666; font-size: 12px; }
                    .warning { background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin: 20px 0; }
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1>X√°c minh ƒë·ªãa ch·ªâ email</h1>
                    </div>
                    <div class="content">
                        <h2>Xin ch√†o {userName}!</h2>
                        <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i <strong>{appName}</strong>.</p>
                        <p>ƒê·ªÉ ho√†n t·∫•t qu√° tr√¨nh ƒëƒÉng k√Ω v√† k√≠ch ho·∫°t t√†i kho·∫£n, vui l√≤ng x√°c minh ƒë·ªãa ch·ªâ email c·ªßa b·∫°n b·∫±ng c√°ch nh·∫•p v√†o n√∫t b√™n d∆∞·ªõi:</p>
                        
                        <div style="text-align: center;">
                            <a href="{verificationLink}" class="button">X√°c minh Email</a>
                        </div>
                        
                        <div class="warning">
                            <strong>L∆∞u √Ω:</strong> Link x√°c minh s·∫Ω h·∫øt h·∫°n sau {expirationHours} gi·ªù. N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán x√°c minh trong th·ªùi gian n√†y, b·∫°n s·∫Ω c·∫ßn y√™u c·∫ßu g·ª≠i l·∫°i email x√°c minh.
                        </div>
                        
                        <p>N·∫øu n√∫t kh√¥ng ho·∫°t ƒë·ªông, b·∫°n c√≥ th·ªÉ sao ch√©p v√† d√°n link sau v√†o tr√¨nh duy·ªát:</p>
                        <p style="word-break: break-all; background: #e9ecef; padding: 10px; border-radius: 5px; font-family: monospace;">
                            {verificationLink}
                        </p>
                        
                        <p>N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán ƒëƒÉng k√Ω n√†y, vui l√≤ng b·ªè qua email n√†y.</p>
                        <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© {appName}</p>
                    </div>
                    <div class="footer">
                        <p>&copy; {currentYear} {appName}. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
                    </div>
                </div>
            </body>
            </html>
            """.replace("{userName}", (String) variables.get("userName"))
              .replace("{appName}", (String) variables.get("appName"))
              .replace("{verificationLink}", (String) variables.get("verificationLink"))
              .replace("{expirationHours}", String.valueOf(variables.get("expirationHours")))
              .replace("{currentYear}", String.valueOf(variables.get("currentYear")));
    }

    /**
     * G·ª≠i email th√¥ng b√°o thay ƒë·ªïi tr·∫°ng th√°i ƒë∆°n ·ª©ng tuy·ªÉn cho ·ª©ng vi√™n
     */
    public void sendApplicationStatusChangedEmail(User applicant,
                                                  String jobTitle,
                                                  String newStatusDisplay,
                                                  String notes) {
        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");

            helper.setFrom(fromEmail);
            helper.setTo(applicant.getEmail());
            helper.setSubject("C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n ·ª©ng tuy·ªÉn - " + jobTitle);

            String html = buildStatusChangedHtml(applicant.getFullName(), jobTitle, newStatusDisplay, notes);
            helper.setText(html, true);

            mailSender.send(message);
            log.info("Status change email sent to applicant: {} for job '{}'", applicant.getEmail(), jobTitle);
        } catch (MessagingException e) {
            log.error("Failed to send status change email to applicant: {}", applicant.getEmail(), e);
            // Kh√¥ng throw ƒë·ªÉ kh√¥ng ch·∫∑n lu·ªìng x·ª≠ l√Ω
        }
    }

    private String buildStatusChangedHtml(String userName, String jobTitle, String statusDisplay, String notes) {
        String appName = "H·ªá th·ªëng Tuy·ªÉn d·ª•ng";
        int year = LocalDateTime.now().getYear();
        String notesBlock = (notes != null && !notes.isBlank())
            ? ("<div style=\"background:#f1f3f5;padding:12px;border-radius:6px;margin-top:12px;\"><strong>Ghi ch√∫:</strong> " +
               notes.replaceAll("<", "&lt;").replaceAll(">", "&gt;") + "</div>")
            : "";
        return (
            "<!DOCTYPE html>" +
            "<html lang=\"vi\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>C·∫≠p nh·∫≠t tr·∫°ng th√°i</title>" +
            "<style>body{font-family:Arial,sans-serif;color:#333}.container{max-width:600px;margin:0 auto;padding:20px}.header{background:#0069d9;color:#fff;padding:20px;text-align:center;border-radius:8px 8px 0 0}.content{background:#f8f9fa;padding:30px;border-radius:0 0 8px 8px}.footer{text-align:center;margin-top:30px;color:#666;font-size:12px}</style></head>" +
            "<body><div class=\"container\"><div class=\"header\"><h1>üì£ C·∫≠p nh·∫≠t tr·∫°ng th√°i</h1></div>" +
            "<div class=\"content\"><p>Xin ch√†o <strong>" + userName + "</strong>,</p>" +
            "<p>Tr·∫°ng th√°i ƒë∆°n ·ª©ng tuy·ªÉn cho v·ªã tr√≠ <strong>" + jobTitle + "</strong> ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh: <strong>" + statusDisplay + "</strong>.</p>" +
            notesBlock +
            "<p>Vui l√≤ng ƒëƒÉng nh·∫≠p h·ªá th·ªëng ƒë·ªÉ xem chi ti·∫øt.</p>" +
            "<p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© " + appName + "</p></div>" +
            "<div class=\"footer\">&copy; " + year + " " + appName + ". T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</div>" +
            "</div></body></html>"
        );
    }

    /**
     * G·ª≠i email th√¥ng b√°o x√°c minh th√†nh c√¥ng
     */
    public void sendVerificationSuccessEmail(User user) {
        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");

            helper.setFrom(fromEmail);
            helper.setTo(user.getEmail());
            helper.setSubject("Email ƒë√£ ƒë∆∞·ª£c x√°c minh th√†nh c√¥ng - H·ªá th·ªëng Tuy·ªÉn d·ª•ng");

            String htmlContent = createVerificationSuccessContent(user);
            helper.setText(htmlContent, true);

            mailSender.send(message);
            log.info("Verification success email sent to: {}", user.getEmail());

        } catch (MessagingException e) {
            log.error("Failed to send verification success email to: {}", user.getEmail(), e);
            // Kh√¥ng throw exception v√¨ ƒë√¢y ch·ªâ l√† th√¥ng b√°o
        }
    }

    /**
     * T·∫°o n·ªôi dung email x√°c minh th√†nh c√¥ng
     */
    private String createVerificationSuccessContent(User user) {
        Map<String, Object> variables = new HashMap<>();
        variables.put("userName", user.getFullName());
        variables.put("loginLink", frontendUrl + "/login");
        variables.put("currentYear", LocalDateTime.now().getYear());
        variables.put("appName", "H·ªá th·ªëng Tuy·ªÉn d·ª•ng");

        return createFallbackHtmlTemplate(variables).replace(
            "X√°c minh ƒë·ªãa ch·ªâ email",
            "Email ƒë√£ ƒë∆∞·ª£c x√°c minh th√†nh c√¥ng"
        ).replace(
            "ƒê·ªÉ ho√†n t·∫•t qu√° tr√¨nh ƒëƒÉng k√Ω v√† k√≠ch ho·∫°t t√†i kho·∫£n, vui l√≤ng x√°c minh ƒë·ªãa ch·ªâ email c·ªßa b·∫°n b·∫±ng c√°ch nh·∫•p v√†o n√∫t b√™n d∆∞·ªõi:",
            "T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t th√†nh c√¥ng! B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p v√† s·ª≠ d·ª•ng t·∫•t c·∫£ t√≠nh nƒÉng c·ªßa h·ªá th·ªëng."
        ).replace(
            "X√°c minh Email",
            "ƒêƒÉng nh·∫≠p ngay"
        ).replace(
            "{verificationLink}",
            (String) variables.get("loginLink")
        ).replace(
            "Link x√°c minh s·∫Ω h·∫øt h·∫°n sau {expirationHours} gi·ªù. N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán x√°c minh trong th·ªùi gian n√†y, b·∫°n s·∫Ω c·∫ßn y√™u c·∫ßu g·ª≠i l·∫°i email x√°c minh.",
            "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi {appName}! B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng t√†i kho·∫£n ngay b√¢y gi·ªù."
        );
    }

    /**
     * G·ª≠i email reset password
     */
    public void sendPasswordResetEmail(User user, String resetToken) {
        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");

            helper.setFrom(fromEmail);
            helper.setTo(user.getEmail());
            helper.setSubject("ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u - H·ªá th·ªëng Tuy·ªÉn d·ª•ng");

            // T·∫°o n·ªôi dung email b·∫±ng HTML template
            String htmlContent = createPasswordResetEmailContent(user, resetToken);
            helper.setText(htmlContent, true);

            mailSender.send(message);
            log.info("Password reset email sent successfully to: {}", user.getEmail());

        } catch (MessagingException e) {
            log.error("Failed to send password reset email to: {}", user.getEmail(), e);
            throw new RuntimeException("Kh√¥ng th·ªÉ g·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u", e);
        }
    }

    /**
     * T·∫°o n·ªôi dung HTML cho email reset password
     */
    private String createPasswordResetEmailContent(User user, String resetToken) {
        Map<String, Object> variables = new HashMap<>();
        variables.put("userName", user.getFullName());
        variables.put("resetLink", frontendUrl + "/reset-password?token=" + resetToken);
        variables.put("expirationHours", 1); // Token h·∫øt h·∫°n sau 1 gi·ªù
        variables.put("currentYear", LocalDateTime.now().getYear());
        variables.put("appName", "H·ªá th·ªëng Tuy·ªÉn d·ª•ng");

        return createPasswordResetHtmlTemplate(variables);
    }

    /**
     * Template HTML cho email reset password
     */
    private String createPasswordResetHtmlTemplate(Map<String, Object> variables) {
        return """
            <!DOCTYPE html>
            <html lang="vi">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</title>
                <style>
                    body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
                    .container { max-width: 600px; margin: 0 auto; padding: 20px; }
                    .header { background: #dc3545; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }
                    .content { background: #f8f9fa; padding: 30px; border-radius: 0 0 8px 8px; }
                    .button { display: inline-block; background: #dc3545; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; margin: 20px 0; }
                    .footer { text-align: center; margin-top: 30px; color: #666; font-size: 12px; }
                    .warning { background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin: 20px 0; }
                    .security { background: #d1ecf1; border: 1px solid #bee5eb; padding: 15px; border-radius: 5px; margin: 20px 0; }
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1>üîí ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h1>
                    </div>
                    <div class="content">
                        <h2>Xin ch√†o {userName}!</h2>
                        <p>Ch√∫ng t√¥i nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa b·∫°n t·∫°i <strong>{appName}</strong>.</p>
                        
                        <div style="text-align: center;">
                            <a href="{resetLink}" class="button">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</a>
                        </div>
                        
                        <div class="warning">
                            <strong>‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</strong> Link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u s·∫Ω h·∫øt h·∫°n sau {expirationHours} gi·ªù. Vui l√≤ng th·ª±c hi·ªán ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u trong th·ªùi gian n√†y.
                        </div>
                        
                        <div class="security">
                            <strong>üîê B·∫£o m·∫≠t:</strong> N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y. M·∫≠t kh·∫©u hi·ªán t·∫°i c·ªßa b·∫°n s·∫Ω kh√¥ng b·ªã thay ƒë·ªïi.
                        </div>
                        
                        <p>N·∫øu n√∫t kh√¥ng ho·∫°t ƒë·ªông, b·∫°n c√≥ th·ªÉ sao ch√©p v√† d√°n link sau v√†o tr√¨nh duy·ªát:</p>
                        <p style="word-break: break-all; background: #e9ecef; padding: 10px; border-radius: 5px; font-family: monospace;">
                            {resetLink}
                        </p>
                        
                        <p>N·∫øu b·∫°n g·∫∑p v·∫•n ƒë·ªÅ ho·∫∑c c·∫ßn h·ªó tr·ª£, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i.</p>
                        <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© {appName}</p>
                    </div>
                    <div class="footer">
                        <p>&copy; {currentYear} {appName}. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
                    </div>
                </div>
            </body>
            </html>
            """.replace("{userName}", (String) variables.get("userName"))
              .replace("{appName}", (String) variables.get("appName"))
              .replace("{resetLink}", (String) variables.get("resetLink"))
              .replace("{expirationHours}", String.valueOf(variables.get("expirationHours")))
              .replace("{currentYear}", String.valueOf(variables.get("currentYear")));
    }

    /**
     * G·ª≠i email th√¥ng b√°o cho nh√† tuy·ªÉn d·ª•ng khi c√≥ ƒë∆°n ·ª©ng tuy·ªÉn m·ªõi
     */
    public void sendNewApplicationEmail(User employer, String jobTitle, String applicantName, String applicationDetailLink) {
        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");

            helper.setFrom(fromEmail);
            helper.setTo(employer.getEmail());
            helper.setSubject("ƒê√£ nh·∫≠n ƒë∆°n ·ª©ng tuy·ªÉn m·ªõi cho v·ªã tr√≠: " + jobTitle);

            String html = createNewApplicationHtml(jobTitle, applicantName, applicationDetailLink);
            helper.setText(html, true);

            mailSender.send(message);
            log.info("New application email sent to employer: {} for job '{}'", employer.getEmail(), jobTitle);
        } catch (MessagingException e) {
            log.error("Failed to send new application email to employer: {}", employer.getEmail(), e);
            // Kh√¥ng throw ƒë·ªÉ kh√¥ng ch·∫∑n lu·ªìng n·ªôp ƒë∆°n
        }
    }

    private String createNewApplicationHtml(String jobTitle, String applicantName, String detailLink) {
        String appName = "H·ªá th·ªëng Tuy·ªÉn d·ª•ng";
        int year = LocalDateTime.now().getYear();
        return (
            "<!DOCTYPE html>" +
            "<html lang=\"vi\">" +
            "<head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>ƒê∆°n ·ª©ng tuy·ªÉn m·ªõi</title>" +
            "<style>body{font-family:Arial,sans-serif;color:#333}.container{max-width:600px;margin:0 auto;padding:20px}.header{background:#28a745;color:#fff;padding:20px;text-align:center;border-radius:8px 8px 0 0}.content{background:#f8f9fa;padding:30px;border-radius:0 0 8px 8px}.button{display:inline-block;background:#28a745;color:#fff;padding:12px 24px;text-decoration:none;border-radius:5px;margin:20px 0}.footer{text-align:center;margin-top:30px;color:#666;font-size:12px}</style></head>" +
            "<body><div class=\"container\"><div class=\"header\"><h1>üì• ƒê∆°n ·ª©ng tuy·ªÉn m·ªõi</h1></div>" +
            "<div class=\"content\"><p>B·∫°n v·ª´a nh·∫≠n m·ªôt ƒë∆°n ·ª©ng tuy·ªÉn m·ªõi cho v·ªã tr√≠ <strong>" + jobTitle + "</strong>.</p>" +
            "<p><strong>·ª®ng vi√™n:</strong> " + applicantName + "</p>" +
            (detailLink != null && !detailLink.isEmpty() ? ("<div style=\"text-align:center;\"><a class=\"button\" href=\"" + detailLink + "\">Xem chi ti·∫øt ƒë∆°n</a></div>") : "") +
            "<p>Vui l√≤ng ƒëƒÉng nh·∫≠p h·ªá th·ªëng ƒë·ªÉ xem v√† x·ª≠ l√Ω h·ªì s∆° ·ª©ng vi√™n.</p>" +
            "<p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© " + appName + "</p></div>" +
            "<div class=\"footer\">&copy; " + year + " " + appName + ". T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</div>" +
            "</div></body></html>"
        );
    }
}
